<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Oyewale</title>
 <link href="http://waleoyediran.github.io/atom.xml" rel="self"/>
 <link href="http://waleoyediran.github.io/"/>
 <updated>2015-07-02T14:46:54+01:00</updated>
 <id>http://waleoyediran.github.io</id>
 <author>
   <name>Oyewale Oyediran</name>
   <email></email>
 </author>

 
 <entry>
   <title>Building Imageing</title>
   <link href="http://waleoyediran.github.io/2015/04/09/building-imageing/"/>
   <updated>2015-04-09T00:00:00+01:00</updated>
   <id>http://waleoyediran.github.io/2015/04/09/building-imageing</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/images/imageng.jpg&quot; alt=&quot;placeholder&quot; title=&quot;Imageing&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the social media ero we live in, people are extremely conscious of how they are perceived by others. We are seeing a much higher level of expression especially from young people and pictures have become one of the most ubiquitous means of these expressions. Testament to these is the success of various photo-editing applications, Instagram, PicMix and others. The recently concluded Google Cloud Developer Challenge inspired us to create something that we think will help people express themselves more.&lt;/p&gt;

&lt;h3&gt;Why we built Imageing?&lt;/h3&gt;

&lt;p&gt;While Instagram seem to have grabbed most of the market with their successful Android and iOS apps, they have yet to put the power of their awesome filters into their web app. The instagram web app only allows you to view photos, edit your profile and comment on photos. Considering the large amount of time people spend on their browsers, we thought their we could take advantage of that space and build a useful photo-editing application that would work on a browser and feature custom image filters and incorporate sharing.&lt;/p&gt;

&lt;h3&gt;How it works&lt;/h3&gt;

&lt;p&gt;We built Imageing with the aim of helping browser-based users aggregate their photos from various social media channels (Facebook, Google+) and also photos on their devices, edit them with various Instagram-like filters and also let them share these edited photos on social media. We also had to ride on our users love for memes, by adding capabilities to create memes out of their photos.
We included trending photos on the homepage where we feature photos that are attracting high volume of traffic. (You could try it out at http://image.ng).&lt;/p&gt;

&lt;h3&gt;How we did it?&lt;/h3&gt;

&lt;p&gt;Imageing’s backend is powered by Google’s AppEngine. When you just want to hack and in no mood to bother yourself about infrastructure and scalability challenges, you certainly would want a platform that offers top grade hardware capabilities and offers you features that allows you get a Minimum-Viable-Product within a short timespan. We had no doubt about AppEngine’s reliability. We chose the AppEngine’s Python runtime because, we wanted a simple language that would allow us iterate fast.
A challenge we had to face was the choice of image processing technique. We had to choose between doing the image processing on the server with Python Image-manipulation Library or on the browser with Javascript. We tried both and compared their performance and decided to go with client-side Image processing.&lt;/p&gt;

&lt;h3&gt;Okay, about the team&lt;/h3&gt;

&lt;p&gt;Its a small team and most of us like to stay under the radar. Just for the records, we have +Caleb Mbakwe, +Moyinoluwa Adeyemi, +Akinade Gbenga and your’s truly +Oyewale Oyediran working on Imageing. We started building it in the laboratory at the Department of Computer Science at Obafemi Awolowo University during one of our free weekends. I’m always happy to answer questions about Imageing on my twitter handle @waleoyediran, if you tweet at me.&lt;/p&gt;

&lt;h3&gt;Where are we going from here?&lt;/h3&gt;

&lt;p&gt;We are not calling for an IPO anytime soon (&lt;em&gt;giggles&lt;/em&gt;*). We are building new free and premium features into Imageing and improving the user experience. Yes, we are adding premium features, they are central to our monetization strategy. We would be ditching the appspot domain we are currently riding on for what we think is a more exciting domain name. We also have a native app cooking up, we would try to take on the big guys.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android SQLite DAO Design</title>
   <link href="http://waleoyediran.github.io/2015/04/02/android-sqlite-dao-design/"/>
   <updated>2015-04-02T00:00:00+01:00</updated>
   <id>http://waleoyediran.github.io/2015/04/02/android-sqlite-dao-design</id>
   <content type="html">&lt;p&gt;In this post, i will be describing a pattern of designing a good SQLite data-access layer for Android.&lt;/p&gt;

&lt;p&gt;When your application needs to offer complex data to other applications, the appriopriate approach is to use &lt;a href=&quot;http://developer.android.com/guide/topics/providers/content-provider-creating.html&quot;&gt;Content Providers&lt;/a&gt;. But many simple applications do not need to copy data to other applications. After using various approaches to data-access design over the years, I have been highly influenced by the approach used by the &lt;a href=&quot;https://github.com/ushahidi/Ushahidi_Android&quot;&gt;Ushahidi Android&lt;/a&gt; client.&lt;/p&gt;

&lt;p&gt;Consider you want to store rows of Users in SQLite with the POJO described below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class User {
   public int id
   public String username;
   public String email;
   public Date createdDate;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We create an interface class that basically contains the Database schema definition. It contains table name, column names and table creation schema.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface IUserSchema {
   String USER_TABLE = &amp;quot;users&amp;quot;;
   String COLUMN_ID = &amp;quot;_id&amp;quot;;
   String COLUMN_USER_NAME = &amp;quot;user_name&amp;quot;;
   String COLUMN_EMAIL = &amp;quot;email&amp;quot;;
   String COLUMN_DATE = &amp;quot;created_date&amp;quot;;
   String USER_TABLE_CREATE = &amp;quot;CREATE TABLE IF NOT EXISTS &amp;quot;
       + USER_TABLE
       + &amp;quot; (&amp;quot;
       + COLUMN_ID
       + &amp;quot; INTEGER PRIMARY KEY, &amp;quot;
       + COLUMN_USER_NAME
       + &amp;quot; TEXT NOT NULL, &amp;quot;
       + COLUMN_EMAIL
       + &amp;quot; TEXT,&amp;quot;
       + COLUMN_DATE
       + &amp;quot;BIGINT &amp;quot;
   + &amp;quot;)&amp;quot;;

   String[] USER_COLUMNS = new String[] { COLUMN_ID, 
      COLUMN_USER_NAME, COLUMN_EMAIL, COLUMN_DATE };
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The CRUD functionality is abstracted in a DbContentProvider class which is inherited by the UserDao class&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public abstract class DbContentProvider {
    public SQLiteDatabase mDb;

    public int delete(String tableName, String selection, 
      String[] selectionArgs) {
        return mDb.delete(tableName, selection, selectionArgs);
    }

    public long insert(String tableName, ContentValues values) {
        return mDb.insert(tableName, null, values);
    }

    protected abstract &amp;lt;T&amp;gt; T cursorToEntity(Cursor cursor);

    public DbContentProvider(SQLiteDatabase db) {
       this.mDb = db;
    }

    public Cursor query(String tableName, String[] columns, 
      String selection, String[] selectionArgs, String sortOrder) {

       final Cursor cursor = mDb.query(tableName, columns, 
        selection, selectionArgs, null, null, sortOrder);

       return cursor;
    }

    public Cursor query(String tableName, String[] columns, 
      String selection, String[] selectionArgs, String sortOrder, 
      String limit) {

       return mDb.query(tableName, columns, selection, 
        selectionArgs, null, null, sortOrder, limit);
    }

    public Cursor query(String tableName, String[] columns, 
        String selection, String[] selectionArgs, String groupBy, 
        String having, String orderBy, String limit) {

        return mDb.query(tableName, columns, selection, 
            selectionArgs, groupBy, having, orderBy, limit);
    }

    public int update(String tableName, ContentValues values,
        String selection, String[] selectionArgs) {
        return mDb.update(tableName, values, selection, 
          selectionArgs);
    }

    public Cursor rawQuery(String sql, String[] selectionArgs) {
        return mDb.rawQuery(sql, selectionArgs);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The basic functions of the User data-access layer could optionally be described in an Interface such as this.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public interface IUserDao {
   public User fetchUserById(int userId);
   public List&amp;lt;User&amp;gt; fetchAllUsers();
   // add user
   public boolean addUser(User user);
   // add users in bulk
   public boolean addUsers(List&amp;lt;User&amp;gt; users);
   public boolean deleteAllUsers();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we create our User Data Access class.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class UserDao extends DbContentProvider 
   implements IUserSchema, IUserDao {

   private Cursor cursor;
   private ContentValues initialValues;
   public UserDao(SQLiteDatabase db) {
      super(db);
   }
   public User fetchUserByID(int id) {
   final String selectionArgs[] = { String.valueOf(id) };
   final String selection = ID + &amp;quot; = ?&amp;quot;;
   User user = new User();
   cursor = super.query(USER_TABLE, USER_COLUMNS, selection,
           selectionArgs, COLUMN_ID);
   if (cursor != null) {
       cursor.moveToFirst();
       while (!cursor.isAfterLast()) {
           user = cursorToEntity(cursor);
           cursor.moveToNext();
       }
       cursor.close();
   }

   return user;
   }

   public List&amp;lt;User&amp;gt; fetchAllUsers() {
       List&amp;lt;User&amp;gt; userList = new ArrayList&amp;lt;User&amp;gt;();
       cursor = super.query(USER_TABLE, USER_COLUMNS, null,
               null, COLUMN_ID);

       if (cursor != null) {
           cursor.moveToFirst();
           while (!cursor.isAfterLast()) {
               User user = cursorToEntity(cursor);
               userList.add(user);
               cursor.moveToNext();
           }
           cursor.close();
       }

       return userList;
    }

    public boolean addUser(User user) {
       // set values
       setContentValue(user);
       try {
           return super.insert(USER_TABLE, getContentValue()) &amp;gt; 0;
       } catch (SQLiteConstraintException ex){
           Log.w(&amp;quot;Database&amp;quot;, ex.getMessage());
           return false;
       }
    }

    protected User cursorToEntity(Cursor cursor) {

       User user = new User();

       int idIndex;
       int userNameIndex;
       int emailIndex;
       int dateIndex;

       if (cursor != null) {
           if (cursor.getColumnIndex(COLUMN_ID) != -1) {
               idIndex = cursor.getColumnIndexOrThrow(COLUMN_ID);
               user.id = cursor.getInt(idIndex);
           }
           if (cursor.getColumnIndex(COLUMN_USER_NAME) != -1) {
               userNameIndex = cursor.getColumnIndexOrThrow(
                COLUMN_USER_NAME);
               user.username = cursor.getString(userNameIndex);
           }
           if (cursor.getColumnIndex(COLUMN_EMAIL) != -1) {
               emailIndex = cursor.getColumnIndexOrThrow(
                COLUMN_EMAIL);
               user.email = cursor.getString(emailIndex);
           }
           if (cursor.getColumnIndex(COLUMN_DATE) != -1) {
               dateIndex = cursor.getColumnIndexOrThrow(COLUMN_DATE);
               user.createdDate = new Date(cursor.getLong(dateIndex));
           }

       }
       return user;
    }

    private void setContentValue(User user) {
       initialValues = new ContentValues();
       initialValues.put(COLUMN_ID, user.id);
       initialValues.put(COLUMN_USER_NAME, user.username);
       initialValues.put(COLUMN_EMAIL, user.email);
       initialValues.put(COLUMN_DATE, user.createdDate.getTime());
    }

    private ContentValues getContentValue() {
       return initialValues;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having our Data Access Object class setup, we then proceed to create our Database Helper class that provides an handle to the database resource. Its important to increment the DatabaseVersion on every schema change.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class Database {
   private static final String TAG = &amp;quot;MyDatabase&amp;quot;;
   private static final String DATABASE_NAME = &amp;quot;my_database.db&amp;quot;;
   private DatabaseHelper mDbHelper;
   // Increment DB Version on any schema change
   private static final int DATABASE_VERSION = 1;
   private final Context mContext
   public static UserDao mUserDao;



   public Database open() throws SQLException {
       mDbHelper = new DatabaseHelper(mContext);
       SQLiteDatabase mDb = mDbHelper.getWritableDatabase();

       mUserDao = new UserDao(mDb);

       return this;
   }

   public void close() {
       mDbHelper.close();
   }

   public Database(Context context) {
       this.mContext = context;
   }


   private static class DatabaseHelper extends SQLiteOpenHelper {
       DatabaseHelper(Context context) {
           super(context, DATABASE_NAME, null, DATABASE_VERSION);
       }

       @Override
       public void onCreate(SQLiteDatabase db) {
           db.execSQL(IUserSchema.USER_TABLE_CREATE);
       }

       @Override
       public void onUpgrade(SQLiteDatabase db, int oldVersion,
          int newVersion) {
           Log.w(TAG, &amp;quot;Upgrading database from version &amp;quot; 
                + oldVersion + &amp;quot; to &amp;quot;
                + newVersion + &amp;quot; which destroys all old data&amp;quot;);

           db.execSQL(&amp;quot;DROP TABLE IF EXISTS &amp;quot; 
                + IUserSchema.USER_TABLE);
           onCreate(db);

       }
   }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Database helper class creates an instance of the DAO class on opening the DB resource
The pattern aslo encourages having one static handle on the database  which could be created in a Application subclass. The DB is opened onCreate of the application and closed onTerminate to avoid leaks.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public class MainApplication extends Application {
   public static final String TAG = MainApplication.class.getSimpleName();
   public static Database mDb;


   @Override
   public void onCreate() {
       super.onCreate();
       mDb = new Database(this);
       mDb.open();
   }

   @Override
   public void onTerminate() {
       mDb.close();
       super.onTerminate();
   }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now in any part of your application, you can grab a user by his id like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;UserEntity user = Database.mUserDao.fetchUserByID(userId);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and insert a user into the Database&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;boolean isSaved = Database.mUserDao.addUser(user)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Credit&lt;/h3&gt;

&lt;p&gt;Much of the code here is adapted from the Ushahidi Android Client&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Enabling SendMail on Ubuntu</title>
   <link href="http://waleoyediran.github.io/2014/06/10/enabling-sendmail-on-ubuntu/"/>
   <updated>2014-06-10T00:00:00+01:00</updated>
   <id>http://waleoyediran.github.io/2014/06/10/enabling-sendmail-on-ubuntu</id>
   <content type="html">&lt;p&gt;So I guess you are building an application that requires email to be sent out. Depending on your platform (PHP has the builtin &lt;a href=&quot;http://www.php.net/manual/en/function.mail.php&quot;&gt;mail()&lt;/a&gt; function and perhaps AppEngine&amp;#39;s &lt;a href=&quot;https://developers.google.com/appengine/docs/python/mail/functions#send_mail&quot;&gt;Sendmail function&lt;/a&gt;), you might find yourself needing to use the Unix sendmail function.&lt;/p&gt;

&lt;h2&gt;To Install SendMail on Ubuntu, just run the command&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;# sudo apt-get install sendmail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;To modify the default configuration:&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;# sendmailconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your PHP mail() function and other services that depend on Sendmail should be firing now&lt;/p&gt;

&lt;p&gt;Additionally, you might want to tail the log file to monitor sendmail functions. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;# tail -f /var/log/maillog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;p&gt;So I hope you have a smoother devlopment experience with mails from your local machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/tux-mail-1ty.gif&quot; alt=&quot;placeholder&quot; title=&quot;Tux&quot;&gt;&lt;/p&gt;

&lt;p&gt;** ..with love from Oyewale. **&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Exciting weekend at Jim's and another Monday at work</title>
   <link href="http://waleoyediran.github.io/2014/04/14/exciting-weekend-at-jims-and-another-monday/"/>
   <updated>2014-04-14T00:00:00+01:00</updated>
   <id>http://waleoyediran.github.io/2014/04/14/exciting-weekend-at-jims-and-another-monday</id>
   <content type="html">&lt;p&gt;The weekend breezed out with a great Sunday afternoon spent with fellow Konga developers with our VP (Engineering).
He and his awesome family hosted us at his plush flat in Ikoyi. I got to play FIFA 14 on XBox with Maleek (his son)
and other devs. Great time diving and swimming in the pool too with the Lagoon in the background.&lt;/p&gt;

&lt;p&gt;Monday doesn&amp;#39;t feel like a workday for me. I so feel out of sync with work that I spent time writing this post.. :D
I&amp;#39;d probably be better of spending the day on Youtube.&lt;/p&gt;

&lt;p&gt;I hope the week comes out good. Writing more clean codes, even though no one sees how beautiful your code is. I&amp;#39;m sure
whoever maintains my code will have a very low WTF rate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/everyone.jpg&quot; alt=&quot;placeholder&quot; title=&quot;Everyone&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Its my new Blog</title>
   <link href="http://waleoyediran.github.io/2014/03/18/its-my-new-blog/"/>
   <updated>2014-03-18T00:00:00+01:00</updated>
   <id>http://waleoyediran.github.io/2014/03/18/its-my-new-blog</id>
   <content type="html">&lt;p&gt;I really want to write a lot this year. I want to start one way or the other&lt;/p&gt;

&lt;p&gt;So help me God
&lt;img src=&quot;/images/io.jpg&quot; alt=&quot;placeholder&quot; title=&quot;Oyewale-io&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
